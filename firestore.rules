rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function userHasRole(role) {
      return request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    function isOperator() {
      return userHasRole('operator');
    }

    function isShelterAdmin() {
      return userHasRole('shelterAdmin');
    }

    // Regras para a coleção 'users'
    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == userId; // Qualquer usuário autenticado pode criar seu próprio perfil
      allow update: if request.auth != null && (request.auth.uid == userId || isOperator()); // O próprio usuário ou um operador podem atualizar
    }

    // Regras para a coleção 'animals'
    match /animals/{animalId} {
      allow read: if true;
      allow create: if request.auth != null &&
        (isOperator() || isShelterAdmin()) &&
        request.resource.data.createdBy == request.auth.uid;
      allow update: if request.auth != null &&
        (isOperator() || (isShelterAdmin() && resource.data.createdBy == request.auth.uid));
      allow delete: if request.auth != null &&
        (isOperator() || (isShelterAdmin() && resource.data.createdBy == request.auth.uid));
    }

    // Regras para pedidos de adoção
    match /adoptionApplications/{applicationId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.applicantId ||
        isOperator() ||
        (isShelterAdmin() && resource.data.shelterAdminId == request.auth.uid)
      );

      allow create: if request.auth != null &&
        request.resource.data.applicantId == request.auth.uid &&
        request.resource.data.status == 'pending';

      allow update: if request.auth != null &&
        (isOperator() || (isShelterAdmin() && resource.data.shelterAdminId == request.auth.uid)) &&
        request.resource.data.animalId == resource.data.animalId &&
        request.resource.data.applicantId == resource.data.applicantId &&
        request.resource.data.shelterAdminId == resource.data.shelterAdminId &&
        request.resource.data.status in ['pending', 'accepted', 'adopted'] &&
        (
          // allow update only if the verification token remains the same (hcaptchaToken),
          // or if neither verification token exists on resource and request
          (
            resource.data.keys().hasAny(['hcaptchaToken']) && request.resource.data.keys().hasAny(['hcaptchaToken']) && request.resource.data.hcaptchaToken == resource.data.hcaptchaToken
          ) ||
          (
            !resource.data.keys().hasAny(['hcaptchaToken']) && !request.resource.data.keys().hasAny(['hcaptchaToken'])
          )
        );

      allow delete: if request.auth != null &&
        (isOperator() || (isShelterAdmin() && resource.data.shelterAdminId == request.auth.uid));
    }
    
    // Regras para a coleção 'shelters'
    match /shelters/{shelterId} {
        allow read: if true;
        allow create, update, delete: if isOperator();
    }

    // Regras para configuração do site
    match /config/site {
        allow read: if true;
        allow create, update, delete: if isOperator();
    }
  }
}
