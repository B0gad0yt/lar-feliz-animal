/**
 * @file Firebase Security Rules for Firestore.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles, public read access for animals and shelters,
 * and locked down access to site configuration.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profiles, accessible only to the owner.
 * - /animals/{animalId}: Stores animal data, publicly readable but create/update/delete restricted.
 * - /shelters/{shelterId}: Stores shelter data, publicly readable but create/update/delete restricted.
 * - /config/site: Stores global site configuration data. Restricted to authenticated users only.
 *
 * Key Security Decisions:
 * - User listing is disabled for privacy.
 * - Animals and Shelters are publicly readable, but writes are restricted until further logic is implemented.
 * - The site config collection restricts write access to authenticated users only.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (get) Authenticated user can read their own profile.
     * @allow (create) Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (update) Authenticated user can update their own profile if the userId matches their auth.uid.
     * @allow (delete) Authenticated user can delete their own profile if the userId matches their auth.uid.
     * @deny (get) Authenticated user cannot read another user's profile.
     * @deny (create) Authenticated user cannot create a profile for another user.
     * @deny (update) Authenticated user cannot update another user's profile.
     * @deny (delete) Authenticated user cannot delete another user's profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      // Function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Function to check if the user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Function to check if the user is the existing owner of the document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to animal data with restricted writes.
     * @path /animals/{animalId}
     * @allow (get) Anyone can read animal data.
     * @allow (list) Anyone can list animal data.
     * @deny (create) No one can create animal documents (until further logic is implemented).
     * @deny (update) No one can update animal documents (until further logic is implemented).
     * @deny (delete) No one can delete animal documents (until further logic is implemented).
     * @principle Public read access with restricted writes.
     */
    match /animals/{animalId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to shelter data with restricted writes.
     * @path /shelters/{shelterId}
     * @allow (get) Anyone can read shelter data.
     * @allow (list) Anyone can list shelter data.
     * @deny (create) No one can create shelter documents (until further logic is implemented).
     * @deny (update) No one can update shelter documents (until further logic is implemented).
     * @deny (delete) No one can delete shelter documents (until further logic is implemented).
     * @principle Public read access with restricted writes.
     */
    match /shelters/{shelterId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

     /**
      * @description Restricts write access to the site configuration.
      * @path /config/site
      * @allow (get) Anyone can read the site configuration.
      * @allow (list) Anyone can list the site configuration.
      * @deny (create) No one can create the site configuration.
      * @deny (update) No one can update the site configuration.
      * @deny (delete) No one can delete the site configuration.
      * @principle Restricts write access to the site configuration
      */
    match /config/site {
        allow get, list: if true;
        allow create, update, delete: if isSignedIn(); // TODO: Add more granular access control for site config.
    }
  }
}