/**
 * @fileoverview Firestore Security Rules for the adoption app.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles, public read access for animals and shelters,
 * and restricts site configuration to authenticated users.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profiles. Access is restricted to the owning user.
 * - /animals/{animalId}: Stores information about adoptable animals. Publicly readable, but write access requires authentication.
 * - /shelters/{shelterId}: Stores information about animal shelters. Publicly readable, but write access requires authentication.
 * - /config/site: Stores global website configuration. Write access is disallowed.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Animals and shelters are publicly readable to maximize discoverability. Write access to these collections is restricted to authenticated users.
 * - Site configuration is read-only to prevent unauthorized modifications.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user is the owner of the profile.
     * @deny (get) if the user is not the owner of the profile.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the existing owner of the document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      // Allow the user to create their own profile if the userId matches their auth uid.
      allow create: if isOwner(userId) && request.resource.data.uid == request.auth.uid;

      // Allow the user to update their own profile, ensuring the uid remains immutable.
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;

      // Allow the user to delete their own profile.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages animal data. Publicly readable, write access restricted to authenticated users.
     * @path /animals/{animalId}
     * @allow (get, list) to anyone.
     * @allow (create, update, delete) to authenticated users.
     * @deny (create, update, delete) to unauthenticated users.
     * @principle Allows public read access while restricting write access to authenticated users.
     */
    match /animals/{animalId} {
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages shelter data. Publicly readable, write access restricted to authenticated users.
     * @path /shelters/{shelterId}
     * @allow (get, list) to anyone.
     * @allow (create, update, delete) to authenticated users.
     * @deny (create, update, delete) to unauthenticated users.
     */
    match /shelters/{shelterId} {
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages site configuration. Only readable.
     * @path /config/site
     * @allow (get) to anyone.
     * @deny (create, update, delete, list) to everyone.
     */
    match /config/site {
        allow get: if true;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }
}