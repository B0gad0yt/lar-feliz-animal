/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for user profiles,
 *              allows public read access to animals and shelters, and restricts
 *              writes to authorized users. The site configuration is publicly readable.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only by the user themselves.
 * - /animals/{animalId}: Stores animal data, publicly readable, writable by authorized users.
 * - /shelters/{shelterId}: Stores shelter data, publicly readable, writable by authorized users.
 * - /config/site: Stores global site configuration, publicly readable.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Animal and shelter data is publicly readable but writable by admins only.
 * - Site configuration is publicly readable, but writable by admins only.
 * - No user listing is allowed to protect user privacy.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profiles, ensuring users can only access their own data.
     * @path /users/{userId}
     * @allow (get) User with ID 'user123' can read their own profile.
     * @allow (create) User with ID 'user123' can create their own profile.
     * @allow (update) User with ID 'user123' can update their own profile.
     * @allow (delete) User with ID 'user123' can delete their own profile.
     * @deny (get) User with ID 'user456' cannot read the profile of user 'user123'.
     * @deny (create) User with ID 'user456' cannot create a profile with ID 'user123'.
     * @deny (update) User with ID 'user456' cannot update the profile of user 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete the profile of user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.uid == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages animal data, allowing public reads and admin-only writes.
     * @path /animals/{animalId}
     * @allow (get) Any user can read animal data.
     * @allow (list) Any user can list animal data.
     * @deny (create) A non-admin user cannot create animal data.
     * @deny (update) A non-admin user cannot update animal data.
     * @deny (delete) A non-admin user cannot delete animal data.
     * @principle Allows public reads and restricts writes to authorized users.
     */
    match /animals/{animalId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages shelter data, allowing public reads and admin-only writes.
     * @path /shelters/{shelterId}
     * @allow (get) Any user can read shelter data.
     * @allow (list) Any user can list shelter data.
     * @deny (create) A non-admin user cannot create shelter data.
     * @deny (update) A non-admin user cannot update shelter data.
     * @deny (delete) A non-admin user cannot delete shelter data.
     * @principle Allows public reads and restricts writes to authorized users.
     */
    match /shelters/{shelterId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

      /**
       * @description Manages site configuration, allowing public reads and admin-only writes.
       * @path /config/site
       * @allow (get) Any user can read the site configuration.
       * @allow (list) Any user can list the site configuration.
       * @deny (create) A non-admin user cannot create site configuration.
       * @deny (update) A non-admin user cannot update site configuration.
       * @deny (delete) A non-admin user cannot delete site configuration.
       * @principle Allows public reads and restricts writes to authorized users.
       */
      match /config/site {
          allow get: if true;
          allow list: if true;
          allow create: if isAdmin();
          allow update: if isAdmin() && resource != null;
          allow delete: if isAdmin() && resource != null;
      }
  }

  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

  function isAdmin() {
    return request.auth.token.role == 'admin';
  }
}