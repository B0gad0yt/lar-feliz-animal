/**
 * @fileoverview Firestore Security Rules for the animal adoption application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access by enforcing strict ownership for user profiles
 * and public read access for animals and shelters.  It uses denormalization where necessary
 * to avoid costly `get()` operations within the rules.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the authenticated user.
 * - /animals/{animalId}: Stores animal data, publicly readable but writable only with valid shelterId.
 * - /shelters/{shelterId}: Stores shelter information, publicly readable, writeable by shelter owner.
 * - /config/site: Stores global site configuration, publicly readable but not writeable.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data. Listing all users is disallowed.
 * - Animals are publicly readable to encourage discovery. Animal creation requires a valid `shelterId` matching the authenticated user's ID to maintain relational integrity. Animal updates and deletes are restricted to the owning shelter.
 * - Shelters are publicly readable, allowing easy access to shelter contact information.
 *   Shelter creation is allowed without authentication to streamline shelter onboarding.
 *   Shelter updates and deletes are not permitted in the current ruleset (can be added by shelter owner).
 * - The site configuration is publicly readable, but not writeable in this version.
 *
 * Denormalization for Authorization:
 * - The `Animal` entity includes a `shelterId` field to directly link it to the owning shelter.
 *   This allows the rules to efficiently verify the shelter's ownership without needing to
 *   perform additional `get()` requests.
 *
 * Structural Segregation:
 * - No structural segregation is used in this ruleset. All user data is stored under
 *   /users/{userId}, and animal data is stored in a single /animals collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's ID matches the resource's shelterId
     */
    function isShelterOwner(shelterId) {
        return request.auth.uid == shelterId;
    }

    /**
     * @description Combines the ownership check with an existence check for update/delete operations.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
    /**
     * @description Enforces access control for user profiles.
     * @path /users/{userId}
     * @allow (get) User 'user123' can read their own profile.
     * @allow (create) User 'user123' can create their own profile.
     * @allow (update) User 'user123' can update their own profile.
     * @allow (delete) User 'user123' can delete their own profile.
     * @deny (get) User 'user456' cannot read user 'user123' profile.
     * @deny (create) User 'user123' cannot create user 'user456' profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for animal data.
     * @path /animals/{animalId}
     * @allow (get) Any user can read animal data.
     * @allow (list) Any user can list animal data.
     * @allow (create) User 'shelter123' can create animal data with shelterId matching their UID.
     * @allow (update) User 'shelter123' can update animal data they own.
     * @allow (delete) User 'shelter123' can delete animal data they own.
     * @deny (create) User 'user456' cannot create animal data.
     * @deny (update) User 'user456' cannot update animal data they don't own.
     * @principle Enforces public read access and owner-only writes based on the 'shelterId' field.
     */
    match /animals/{animalId} {
        allow get, list: if true;
        allow create: if isSignedIn() && request.resource.data.shelterId == request.auth.uid;
        allow update: if isSignedIn() && resource.data.shelterId == request.auth.uid;
        allow delete: if isSignedIn() && resource.data.shelterId == request.auth.uid;
    }

    /**
     * @description Enforces access control for shelter data.
     * @path /shelters/{shelterId}
     * @allow (get) Any user can read shelter data.
     * @allow (list) Any user can list shelter data.
     * @allow (create) Any user can create shelter data.
     * @deny (update) No updates allowed in this version.
     * @deny (delete) No deletes allowed in this version.
     */
    match /shelters/{shelterId} {
        allow get, list: if true;
        allow create: if true;
        allow update, delete: if false;
    }

    /**
     * @description Enforces access control for site configuration data.
     * @path /config/site
     * @allow (get) Any user can read site configuration data.
     * @deny (create) No one can create the site configuration document via client SDKs.
     * @deny (update) No one can update the site configuration document via client SDKs.
     * @deny (delete) No one can delete the site configuration document via client SDKs.
     */
    match /config/site {
        allow get: if true;
        allow create, update, delete: if false;
    }
  }
}