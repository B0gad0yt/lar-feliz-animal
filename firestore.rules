/**
 * @file Firestore Security Rules
 * @description This ruleset implements a role-based access control model with user-specific data isolation.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the authenticated user.
 * - /animals/{animalId}: Stores information about animals, publicly readable but with restricted creation, updates, and deletes.
 * - /shelters/{shelterId}: Stores information about shelters, publicly readable but with restricted creation, updates, and deletes.
 * - /config/site: Stores global site configuration, only writable by admins.
 *
 * Key Security Decisions:
 * - User listing is disallowed for privacy.
 * - Public read access is granted to the `animals` and `shelters` collections to facilitate discovery. Writes are restricted to ensure data integrity.
 * - The `siteConfig` document is only writable by users with the "admin" role.
 *
 * Denormalization for Authorization:
 * - The `animals` documents have a `shelterId` field, which could be used to check shelter ownership if ownership-based writes were required. Currently, only admins can create/update/delete.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile with matching UID.
     * @allow (get, list, update, delete) - Authenticated user accesses their own profile.
     * @deny (create) - Authenticated user tries to create a profile with a mismatched UID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to animal data.
     * @path /animals/{animalId}
     * @allow (get, list) - Any user can read animal data.
     * @allow (create) - Only admin users can create animal data. The shelterId must exist
     * @allow (update, delete) - Only admin users can modify or delete animal data.
     * @deny (create) - Non-admin users cannot create animal data.
     * @deny (update, delete) - Non-admin users cannot modify or delete animal data.
     * @principle Public read, admin-only write.
     */
    match /animals/{animalId} {
        function isAdmin() {
            return request.auth.token.role == 'admin';
        }

        allow get, list: if true;
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to shelter data.
     * @path /shelters/{shelterId}
     * @allow (get, list) - Any user can read shelter data.
     * @allow (create) - Only admin users can create shelter data.
     * @allow (update, delete) - Only admin users can modify or delete shelter data.
     * @deny (create) - Non-admin users cannot create shelter data.
     * @deny (update, delete) - Non-admin users cannot modify or delete shelter data.
     * @principle Public read, admin-only write.
     */
    match /shelters/{shelterId} {
        function isAdmin() {
            return request.auth.token.role == 'admin';
        }

        allow get, list: if true;
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }

      /**
       * @description Controls access to site configuration.
       * @path /config/site
       * @allow (get) - Any user can read the site configuration.
       * @allow (update) - Only admin users can update the site configuration.
       * @deny (create, delete) - No one can create or delete the site configuration document. It is created and managed via other means.
       * @deny (update) - Non-admin users cannot modify the site configuration.
       * @principle Role-based access control for global configuration.
       */
    match /config/{document} {
      function isAdmin() {
        return request.auth.token.role == 'admin';
      }

      allow get: if true;
      allow list: if false;
      allow create: if false;
      allow update: if isAdmin() && resource != null;
      allow delete: if false;
    }
  }
}